# -*- coding: utf-8 -*-
"""BitcoinFuture.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/19-PhBW2l-M8lWfWAk6jLnKrjqM0Sv3Ix
"""

# Instalar a biblioteca requests para fazer requisições à API CoinGecko
!pip install requests

# Instalar a biblioteca pandas para manipulação de dados
!pip install pandas

# Instalar a biblioteca matplotlib para visualização de gráficos
!pip install matplotlib

import requests
import pandas as pd
import matplotlib.pyplot as plt
from datetime import datetime

# Função para obter dados de preços históricos da CoinGecko
def get_crypto_data(crypto_id='bitcoin', currency='usd', days='30'):
    url = f"https://api.coingecko.com/api/v3/coins/{crypto_id}/market_chart"
    params = {
        'vs_currency': currency,
        'days': days
    }
    response = requests.get(url, params=params)
    data = response.json()

    # Extraindo os preços e timestamps
    prices = data['prices']
    df = pd.DataFrame(prices, columns=['timestamp', 'price'])

    # Convertendo timestamp para formato legível
    df['date'] = pd.to_datetime(df['timestamp'], unit='ms')
    return df

crypto_data = get_crypto_data('bitcoin', 'usd', '30')
crypto_data.head()

# Visualizando a variação do preço do Bitcoin nos últimos 30 dias
plt.figure(figsize=(10,5))
plt.plot(crypto_data['date'], crypto_data['price'], label='Bitcoin Price (USD)')
plt.xlabel('Date')
plt.ylabel('Price (USD)')
plt.title('Bitcoin Price Over Last 30 Days')
plt.legend()
plt.show()

from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
import numpy as np

# Preparando os dados para a regressão linear
crypto_data['day_number'] = np.arange(len(crypto_data))

# Definindo as variáveis dependente e independente
X = crypto_data[['day_number']]
y = crypto_data['price']

# Dividindo os dados em conjuntos de treino e teste
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Criando o modelo de regressão linear
model = LinearRegression()
model.fit(X_train, y_train)

# Fazendo previsões
y_pred = model.predict(X_test)

# Comparando valores reais e previstos
plt.figure(figsize=(10,5))
plt.scatter(X_test, y_test, color='blue', label='Preço Real')
plt.plot(X_test, y_pred, color='red', label='Preço Previsto')
plt.xlabel('Dia')
plt.ylabel('Preço (USD)')
plt.title('Previsão de Preço de Bitcoin usando Regressão Linear')
plt.legend()
plt.show()